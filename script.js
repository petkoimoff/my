/**
 * PostVai.com Chat Assistant
 * This script contains all the necessary logic for the chat application, including:
 * - ChatUI: Manages the user interface and interactions.
 * - RAGChatSystem: Handles the core logic of fetching, processing, and ranking posts.
 * - PostVaiChatApp: The main application class that orchestrates the UI and RAG system.
 */

// ===================================================================================
// CLASS 1: RAG (Retrieval-Augmented Generation) System
// Handles fetching data from PostVai.com, processing it, and finding answers.
// ===================================================================================
class RAGChatSystem {
    constructor() {
        this.apiBaseUrl = 'https://postvai.com/wp-json/wp/v2';
        this.queryCache = new Map();
        this.cacheExpiry = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç–∏
    }

    /**
     * Searches posts on the WordPress server using the search parameter.
     * This is much more efficient than fetching all posts.
     */
    async searchPosts(query) {
        const url = new URL(`${this.apiBaseUrl}/posts`);
        url.searchParams.set('search', query);
        url.searchParams.set('per_page', '20'); // Get top 20 results from WP search
        url.searchParams.set('_fields', 'id,title,content,link,excerpt,date');
        url.searchParams.set('status', 'publish');

        try {
            const response = await fetch(url.toString());
            if (!response.ok) throw new Error(`HTTP ${response.status}`);
            return await response.json();
        } catch (error) {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–∏—Ä–µ–∫—Ç–Ω–æ —Ç—ä—Ä—Å–µ–Ω–µ:', error);
            if (error.message.includes('CORS') || error.message.includes('NetworkError') || error.message.includes('Failed to fetch')) {
                console.log('–û–ø–∏—Ç –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ —Å CORS proxy...');
                return this.searchWithCorsProxy(query);
            }
            throw new Error('–ù–µ –º–æ–≥–∞ –¥–∞ –∏–∑–≤—ä—Ä—à–∞ —Ç—ä—Ä—Å–µ–Ω–µ –≤ –º–æ–º–µ–Ω—Ç–∞.');
        }
    }

    /**
     * –†–µ–∑–µ—Ä–≤–µ–Ω –º–µ—Ç–æ–¥ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ —Å CORS proxy.
     */
    async searchWithCorsProxy(query) {
        try {
            const proxyUrl = 'https://api.allorigins.win/get?url=';
            const targetUrl = encodeURIComponent(`${this.apiBaseUrl}/posts?search=${query}&per_page=20&_fields=id,title,content,link,excerpt,date&status=publish`);

            const response = await fetch(proxyUrl + targetUrl);
            const data = await response.json();

            if (data.contents) {
                return JSON.parse(data.contents);
            }
            throw new Error('–ü—Ä–∞–∑–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä –æ—Ç CORS proxy');
        } catch (error) {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ CORS proxy —Ç—ä—Ä—Å–µ–Ω–µ:', error);
            return [];
        }
    }

    /**
     * –ü–æ—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ HTML —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –¥–æ —á–∏—Å—Ç —Ç–µ–∫—Å—Ç.
     */
    cleanHtml(htmlText) {
        if (!htmlText) return "";
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = htmlText;
        const scripts = tempDiv.querySelectorAll('script, style');
        scripts.forEach(el => el.remove());
        let text = tempDiv.textContent || tempDiv.innerText || "";
        return text
            .replace(/&nbsp;/g, ' ').replace(/&amp;/g, '&').replace(/&lt;/g, '<')
            .replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&#039;/g, "'")
            .replace(/&hellip;/g, '...').replace(/\s+/g, ' ').trim();
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ (—Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è, –º–∞–ª–∫–∏ –±—É–∫–≤–∏ –∏ —Ç.–Ω.).
     */
    preprocessText(text) {
        return text.toLowerCase()
            .replace(/[^\u0400-\u04FF\w\s]/g, ' ') // –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –∫–∏—Ä–∏–ª–∏—Ü–∞ –∏ –ª–∞—Ç–∏–Ω–∏—Ü–∞
            .replace(/\s+/g, ' ').trim().split(/\s+/)
            .filter(word => word.length > 2);
    }

    /**
     * –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ TF-IDF –≤–µ–∫—Ç–æ—Ä–∏ –æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∏.
     */
    createTfIdfVectors(documents) {
        const processedDocs = documents.map(doc => this.preprocessText(doc));
        const vocabulary = new Set(processedDocs.flat());
        const vocabArray = Array.from(vocabulary);
        const docCount = processedDocs.length;

        const idfMap = new Map();
        vocabArray.forEach(word => {
            const docFreq = processedDocs.filter(doc => doc.includes(word)).length;
            idfMap.set(word, Math.log(docCount / (1 + docFreq)));
        });

        const vectors = processedDocs.map(words => {
            const vector = new Array(vocabArray.length).fill(0);
            const wordCount = new Map();
            words.forEach(word => wordCount.set(word, (wordCount.get(word) || 0) + 1));

            vocabArray.forEach((word, index) => {
                if (wordCount.has(word)) {
                    const tf = wordCount.get(word) / words.length;
                    vector[index] = tf * idfMap.get(word);
                }
            });
            return vector;
        });

        return { vectors, vocabulary: vocabArray };
    }

    /**
     * –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –∫–æ—Å–∏–Ω—É—Å–æ–≤–æ —Å—Ö–æ–¥—Å—Ç–≤–æ –º–µ–∂–¥—É –¥–≤–∞ –≤–µ–∫—Ç–æ—Ä–∞.
     */
    cosineSimilarity(vecA, vecB) {
        let dotProduct = 0, normA = 0, normB = 0;
        for (let i = 0; i < vecA.length; i++) {
            dotProduct += vecA[i] * vecB[i];
            normA += vecA[i] * vecA[i];
            normB += vecB[i] * vecB[i];
        }
        if (normA === 0 || normB === 0) return 0;
        return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));
    }

    /**
     * –†–∞–Ω–∂–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —á—Ä–µ–∑ TF-IDF –∏ –∫–æ—Å–∏–Ω—É—Å–æ–≤–æ —Å—Ö–æ–¥—Å—Ç–≤–æ.
     */
    async rankRelevantPosts(query, posts, topK = 5) {
        if (!posts || posts.length === 0) return [];

        try {
            const postTexts = posts.map(post => {
                const title = this.cleanHtml(post.title?.rendered || '');
                const content = this.cleanHtml(post.content?.rendered || '');
                return `${title} ${content}`;
            });

            const allTexts = [...postTexts, query];
            const { vectors } = this.createTfIdfVectors(allTexts);
            const queryVector = vectors.pop();

            const similarities = vectors.map((postVector, index) => ({
                index,
                similarity: this.cosineSimilarity(queryVector, postVector),
                post: posts[index]
            }));

            similarities.sort((a, b) => b.similarity - a.similarity);

            return similarities
                .filter(item => item.similarity > 0.01) // –ü–æ-–Ω–∏—Å—ä–∫ –ø—Ä–∞–≥, —Ç—ä–π –∫–∞—Ç–æ WP search –≤–µ—á–µ –µ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–ª
                .slice(0, topK)
                .map(item => ({ ...item.post, similarity_score: item.similarity }));
        } catch (error) {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–∞–Ω–∂–∏—Ä–∞–Ω–µ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
            return [];
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä –Ω–∞ –±–∞–∑–∞—Ç–∞ –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
     */
    generateResponse(query, relevantPosts) {
        if (!relevantPosts || relevantPosts.length === 0) {
            return {
                answer: '–ó–∞ —Å—ä–∂–∞–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–º–µ—Ä–∏—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–æ–∑–∏ –≤—ä–ø—Ä–æ—Å –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏—Ç–µ –Ω–∞ PostVai.com. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ —Å —Ä–∞–∑–ª–∏—á–Ω–∏ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏.',
                sources: []
            };
        }

        const sources = relevantPosts.map(post => ({
            title: this.cleanHtml(post.title?.rendered || ''),
            link: post.link || '',
            similarity: post.similarity_score || 0,
            date: post.date ? new Date(post.date).toLocaleDateString('bg-BG') : ''
        }));

        const answerParts = [`üîç –ù–∞–º–µ—Ä–∏—Ö ${relevantPosts.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∫–æ–∏—Ç–æ –º–æ–∂–µ –¥–∞ –æ—Ç–≥–æ–≤–æ—Ä—è—Ç –Ω–∞ –≤—ä–ø—Ä–æ—Å–∞ –≤–∏:`];
        relevantPosts.forEach((post, index) => {
            const title = this.cleanHtml(post.title?.rendered || '');
            const excerpt = this.cleanHtml(post.excerpt?.rendered || '');
            answerParts.push(`\n**${index + 1}. ${title}**`);
            answerParts.push(excerpt || '–ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–æ —Ä–µ–∑—é–º–µ.');
        });
        answerParts.push("\nüìö –ó–∞ –ø—ä–ª–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –º–æ–ª—è –ø–æ—Å–µ—Ç–µ—Ç–µ –ª–∏–Ω–∫–æ–≤–µ—Ç–µ –∫—ä–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏—Ç–µ.");

        return { answer: answerParts.join('\n'), sources: sources };
    }

    /**
     * –ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∑–∞—è–≤–∫–∏.
     */
    async processQuery(question) {
        const cached = this.queryCache.get(question);
        if (cached && (Date.now() - cached.timestamp < this.cacheExpiry)) {
            console.log("–í—Ä—ä—â–∞–º –∫–µ—à–∏—Ä–∞–Ω –æ—Ç–≥–æ–≤–æ—Ä –∑–∞:", question);
            return cached.response;
        }

        try {
            if (!question || question.trim().length < 3) {
                return { answer: '–ú–æ–ª—è, –∑–∞–¥–∞–π—Ç–µ –ø–æ-–∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –≤—ä–ø—Ä–æ—Å (–ø–æ–Ω–µ 3 —Å–∏–º–≤–æ–ª–∞).', sources: [] };
            }

            console.log('–¢—ä—Ä—Å—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞:', question);
            const posts = await this.searchPosts(question);

            if (!posts || posts.length === 0) {
                return { answer: '–ù–µ –æ—Ç–∫—Ä–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, —Å–≤—ä—Ä–∑–∞–Ω–∏ —Å –≤–∞—à–µ—Ç–æ —Ç—ä—Ä—Å–µ–Ω–µ.', sources: [] };
            }

            console.log(`–ù–∞–º–µ—Ä–µ–Ω–∏ ${posts.length} –≤—ä–∑–º–æ–∂–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –†–∞–Ω–∂–∏—Ä–∞–º...`);
            const rankedPosts = await this.rankRelevantPosts(question, posts, 5);
            const response = this.generateResponse(question, rankedPosts);

            this.queryCache.set(question, { response, timestamp: Date.now() });
            console.log(`–ù–∞–º–µ—Ä–µ–Ω–∏ ${rankedPosts.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.`);
            return response;

        } catch (error) {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∑–∞—è–≤–∫–∞—Ç–∞:', error);
            return { answer: '–í—ä–∑–Ω–∏–∫–Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç—ä—Ä—Å–µ–Ω–µ—Ç–æ. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.', sources: [] };
        }
    }
}


// ===================================================================================
// CLASS 2: Chat UI Manager
// Handles all DOM manipulations and user interface events.
// ===================================================================================
class ChatUI {
    constructor() {
        this.chatMessages = document.getElementById('chatMessages');
        this.chatForm = document.getElementById('chatForm');
        this.chatInput = document.getElementById('chatInput');
        this.sendButton = document.getElementById('sendButton');
        this.statusIndicator = document.getElementById('statusIndicator');
        this.charCounter = document.getElementById('charCounter');
        this.toastContainer = document.getElementById('toastContainer');

        this.initializeEventListeners();
        this.updateCharCounter();
        this.addWelcomeMessage();
    }

    initializeEventListeners() {
        this.chatForm.addEventListener('submit', e => { e.preventDefault(); this.handleSendMessage(); });
        this.chatInput.addEventListener('keypress', e => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); this.handleSendMessage(); } });
        this.chatInput.addEventListener('input', () => { this.updateCharCounter(); this.autoResizeInput(); });
        this.chatInput.focus();
    }

    autoResizeInput() {
        this.chatInput.style.height = 'auto';
        this.chatInput.style.height = `${Math.min(this.chatInput.scrollHeight, 120)}px`;
    }

    updateCharCounter() {
        const len = this.chatInput.value.length;
        const max = this.chatInput.maxLength;
        this.charCounter.textContent = len;
        this.charCounter.parentElement.style.color = len > max * 0.8 ? '#f44336' : '#999';
    }

    setStatus(status, message = '') {
        const colors = { ready: '#4CAF50', processing: '#ff9800', error: '#f44336' };
        this.statusIndicator.style.background = colors[status] || colors.ready;
        this.statusIndicator.title = message;
    }

    async handleSendMessage() {
        const question = this.chatInput.value.trim();
        if (question.length < 3) {
            this.showToast('–í—ä–ø—Ä–æ—Å—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–Ω–µ 3 —Å–∏–º–≤–æ–ª–∞', 'warning');
            return;
        }

        this.addMessage(question, 'user');
        this.chatInput.value = '';
        this.updateCharCounter();
        this.autoResizeInput();

        this.setLoading(true);
        this.setStatus('processing', '–¢—ä—Ä—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è...');
        const loadingId = this.addLoadingMessage();

        try {
            if (window.chatApp && typeof window.chatApp.processQuery === 'function') {
                const response = await window.chatApp.processQuery(question);
                this.removeMessage(loadingId);
                this.addMessage(response.answer, 'bot', response.sources);
                this.setStatus('ready', '–°–∏—Å—Ç–µ–º–∞—Ç–∞ –µ –≥–æ—Ç–æ–≤–∞');
            } else {
                throw new Error('–ß–∞—Ç —Å–∏—Å—Ç–µ–º–∞—Ç–∞ –Ω–µ –µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–∞.');
            }
        } catch (error) {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ:', error);
            this.removeMessage(loadingId);
            this.addMessage('–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫–∞—Ç–∞.', 'bot');
            this.setStatus('error', error.message);
            this.showToast('–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞', 'error');
        } finally {
            this.setLoading(false);
            this.chatInput.focus();
        }
    }

    addMessage(content, sender, sources = null) {
        const welcomeMessage = this.chatMessages.querySelector('.welcome-message');
        if (welcomeMessage) {
            welcomeMessage.style.animation = 'fadeOut 0.3s ease-out forwards';
            setTimeout(() => welcomeMessage.remove(), 300);
        }

        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}`;
        messageDiv.innerHTML = `
            <div class="message-bubble">
                ${this.formatContent(content)}
                ${sender === 'bot' && sources && sources.length > 0 ? this.createSourcesElement(sources) : ''}
                ${sender === 'bot' ? `<div class="message-timestamp">${new Date().toLocaleTimeString('bg-BG', { hour: '2-digit', minute: '2-digit' })}</div>` : ''}
            </div>
        `;
        this.chatMessages.appendChild(messageDiv);
        this.scrollToBottom();
    }

    createSourcesElement(sources) {
        const sourcesList = sources.map((source, index) => `
            <div class="source-item">
                <a href="${source.link}" target="_blank" rel="noopener noreferrer">${index + 1}. ${source.title}</a>
                <div style="margin-top: 4px; font-size: 0.75rem; color: #666;">
                    <span class="similarity-score">–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç: ${Math.round(source.similarity * 100)}%</span>
                    ${source.date ? `<span> ‚Ä¢ –î–∞—Ç–∞: ${source.date}</span>` : ''}
                </div>
            </div>
        `).join('');
        return `<div class="sources"><h4>–ò–∑—Ç–æ—á–Ω–∏—Ü–∏ –æ—Ç PostVai.com:</h4>${sourcesList}</div>`;
    }

    addLoadingMessage() {
        const id = `loading_${Date.now()}`;
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message bot';
        messageDiv.id = id;
        messageDiv.innerHTML = `
            <div class="message-bubble">
                <div class="loading">
                    <span>üîç –¢—ä—Ä—Å—è –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏—Ç–µ –Ω–∞ PostVai.com...</span>
                    <div class="loading-dots">
                        <div class="loading-dot"></div><div class="loading-dot"></div><div class="loading-dot"></div>
                    </div>
                </div>
            </div>`;
        this.chatMessages.appendChild(messageDiv);
        this.scrollToBottom();
        return id;
    }

    removeMessage(id) {
        const message = document.getElementById(id);
        if (message) {
            message.style.animation = 'fadeOut 0.3s ease-out forwards';
            setTimeout(() => message.remove(), 300);
        }
    }

    formatContent(content) {
        return content
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\n/g, '<br>');
    }

    setLoading(isLoading) {
        this.sendButton.disabled = isLoading;
        this.chatInput.disabled = isLoading;
        this.sendButton.querySelector('.button-text').textContent = isLoading ? '–ò–∑–ø—Ä–∞—â–∞...' : '–ò–∑–ø—Ä–∞—Ç–∏';
        this.sendButton.querySelector('.button-icon').textContent = isLoading ? '‚è≥' : 'üì§';
    }

    scrollToBottom() {
        requestAnimationFrame(() => { this.chatMessages.scrollTop = this.chatMessages.scrollHeight; });
    }

    showToast(message, type = 'info', duration = 4000) {
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.textContent = message;
        this.toastContainer.appendChild(toast);
        setTimeout(() => {
            toast.style.animation = 'slideOut 0.3s ease-out forwards';
            setTimeout(() => toast.remove(), 300);
        }, duration);
    }

    addWelcomeMessage() {
        const welcomeDiv = document.createElement('div');
        welcomeDiv.className = 'welcome-message';
        welcomeDiv.innerHTML = `
            <div class="welcome-icon">ü§ñ</div>
            <h3>–î–æ–±—Ä–µ –¥–æ—à–ª–∏ –≤ —á–∞—Ç –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞!</h3>
            <p>–ó–∞–¥–∞–π—Ç–µ –≤—ä–ø—Ä–æ—Å –∏ —â–µ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≥–æ–≤–æ—Ä –Ω–∞ –±–∞–∑–∞—Ç–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏—Ç–µ –≤ PostVai.com.</p>
            <div class="example-questions">
                <h4>üí° –ü—Ä–∏–º–µ—Ä–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏:</h4>
                <div class="example-grid">
                    <button class="example-question" onclick="askExample('–ö–∞–∫–≤–æ –µ –¥–µ–∑–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?')">üîç –ö–∞–∫–≤–æ –µ –¥–µ–∑–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?</button>
                    <button class="example-question" onclick="askExample('–ö–∞–∫ –¥–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞–µ–º —Ñ–∞–ª—à–∏–≤–∏—Ç–µ –Ω–æ–≤–∏–Ω–∏?')">‚ö†Ô∏è –ö–∞–∫ –¥–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞–µ–º —Ñ–∞–ª—à–∏–≤–∏—Ç–µ –Ω–æ–≤–∏–Ω–∏?</button>
                    <button class="example-question" onclick="askExample('–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –æ—Ç –¥–µ–∑–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞?')">üìä –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –æ—Ç –¥–µ–∑–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞?</button>
                    <button class="example-question" onclick="askExample('–ú–µ–¥–∏–π–Ω–∞ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç?')">üìö –ú–µ–¥–∏–π–Ω–∞ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç?</button>
                </div>
            </div>`;
        this.chatMessages.appendChild(welcomeDiv);
    }
}


// ===================================================================================
// CLASS 3: Main Chat Application
// Orchestrates the RAG system and the UI.
// ===================================================================================
class PostVaiChatApp {
    constructor() {
        this.ragSystem = new RAGChatSystem();
        this.chatUI = new ChatUI();
        window.chatApp = this; // Make it globally accessible for the UI
        this.chatUI.setStatus('ready', '–°–∏—Å—Ç–µ–º–∞—Ç–∞ –µ –≥–æ—Ç–æ–≤–∞ –∑–∞ –≤—ä–ø—Ä–æ—Å–∏');
        console.log('‚úÖ –ß–∞—Ç –∞—Å–∏—Å—Ç–µ–Ω—Ç—ä—Ç –µ –≥–æ—Ç–æ–≤ –∑–∞ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ.');
    }

    async processQuery(question) {
        const startTime = Date.now();
        const response = await this.ragSystem.processQuery(question);
        const processingTime = Date.now() - startTime;
        console.log(`‚úÖ –ó–∞—è–≤–∫–∞—Ç–∞ –µ –æ–±—Ä–∞–±–æ—Ç–µ–Ω–∞ –∑–∞ ${processingTime}ms`);
        return response;
    }
}

// ===================================================================================
// GLOBAL FUNCTIONS & INITIALIZATION
// ===================================================================================

/**
 * –§—É–Ω–∫—Ü–∏—è, –∫–æ—è—Ç–æ —Å–µ –∏–∑–≤–∏–∫–≤–∞ –æ—Ç –±—É—Ç–æ–Ω–∏—Ç–µ –∑–∞ –ø—Ä–∏–º–µ—Ä–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏.
 */
function askExample(question) {
    const chatInput = document.getElementById('chatInput');
    if (chatInput) {
        chatInput.value = question;
        chatInput.focus();
        // Manually trigger input event to update counter and size
        chatInput.dispatchEvent(new Event('input', { bubbles: true }));
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞.
 */
document.addEventListener('DOMContentLoaded', () => {
    new PostVaiChatApp();
});
